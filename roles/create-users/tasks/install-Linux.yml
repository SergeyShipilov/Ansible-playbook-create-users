---
- name: debug variable group_names
  debug: var=group_names
  when: debug_enabled_default | bool

- name: debug variable users
  debug: var=users
  when: debug_enabled_default | bool

- name: add group | create primary group before adding user to group
  group:
    name: "{{ item.primarygroup }}"
    gid: "{{ item.primarygid | default(omit) }}"
    state: present
  when: item.primarygroup is defined and item.servers | intersect(group_names)
  loop: '{{ users }}'
  loop_control:
    label: "primarygroup: {{ item.primarygroup if item.primarygroup is defined else '' }}, primarygid: {{ item.primarygid if item.primarygid is defined else 'default' }}" # noqa 204

- name: set_fact - get groups as list per server
  set_fact:
    groups_as_list: "{{ (groups_as_list|default([]) + item.groups.split(','))|map('trim')|list|sort|unique }}"
  loop: '{{ users }}'
  when: item.groups is defined and item.servers | intersect(group_names)
  loop_control:
    label: "username: {{ item.username }}, groups_as_list: {{ item.groups if item.groups is defined else '' }}"

- name: debug show groups_as_list
  debug: var=groups_as_list
  when: debug_enabled_default | bool

- name: add group | create groups before adding user to group
  group:
    name: "{{ item }}"
    state: present
  when: groups_as_list is defined
  loop: "{{ groups_as_list }}"
  loop_control:
    label: "groups: {{ item }}"

- name: add users | create users, shell, home dirs
  user:
    name: "{{ item.username }}"
    uid: "{{ item.uid | default(omit, True) }}"
    password: "{{ item.password | string | password_hash('sha512') }}"
    update_password: "{{ item.update_password if item.update_password is defined else default_update_password }}"
    group: "{{ item.primarygroup | default(omit) }}"
    groups: "{{ item.groups | default(omit) }}"
    shell: "{{ item.shell if item.shell is defined else default_shell }}"
    createhome: yes
    system: "{{ item.system | default(omit) }}"
    comment: "{{ item.comment if item.comment is defined else '' }}"
    state: present
  when: (item.user_state == 'present' or item.user_state == 'lock') and item.servers | intersect(group_names)
  loop: '{{ users }}'
  loop_control:
    label: "username: {{ item.username }}, user_state: {{ item.user_state }}, password: {{ 'True' if item.password is defined else 'False' }}, update_password: {{ item.update_password if item.update_password is defined else default_update_password }}, primarygroup: {{ item.primarygroup if item.primarygroup is defined else ''}}, groups: {{ item.groups if item.groups is defined else ''}}, servers: {{ item.servers if item.servers is defined else '' }}, group_names: {{ group_names }}"

- name: add users | Unlock password login (set expiry to -1)
  user:
    name: "{{ item.username }}"
    expires: -1
  when: item.user_state == 'present' and item.servers | intersect(group_names)
  loop: '{{ users }}'
  loop_control:
    label: "username: {{ item.username }}, user_state: {{ item.user_state }}"

- name: lock users | Lock password & ssh key authentication
  user:
    name: "{{ item.username }}"
    expires: 0
  when: item.user_state == 'lock' and item.servers | intersect(group_names)
  loop: '{{ users }}'
  loop_control:
    label: "username: {{ item.username }}, user_state: {{ item.user_state }}"

- name: SSH Keys | Add authorized key for ssh key authentication
  authorized_key:
    user: "{{ item.username }}"
    key: "{{ item.ssh_key }}"
    exclusive: "{{ item.exclusive_ssh_key if item.exclusive_ssh_key is defined else 'no' }}"
    state: present
  when: item.ssh_key is defined and item.servers | intersect(group_names)
  loop: '{{ users }}'
  loop_control:
    label: "username: {{ item.username }}, ssh_key: {{ 'True' if item.ssh_key is defined else 'False' }}, exclusive_ssh_key: {{ item.exclusive_ssh_key if item.exclusive_ssh_key is defined else 'False' }}" # noqa 204

- name: SSH Keys | Generate ssh key
  user:
    name: "{{ item.username }}"
    generate_ssh_key: "{{ item.generate_ssh_key | default(false) }}"
    ssh_key_bits: "{{ item.ssh_key_bits | default(omit) }}"
    ssh_key_passphrase: "{{ item.ssh_key_passphrase | default(omit) }}"
  when: item.generate_ssh_key is defined and item.servers | intersect(group_names)
  loop: '{{ users }}'
  loop_control:
    label: "username: {{ item.username }}, generate_ssh_key: {{ 'True' if item.generate_ssh_key is defined else 'False' }}, ssh_key_bits: {{ item.ssh_key_bits if item.ssh_key_bits is defined else '' }}, ssh_key_passphrase: {{ 'True' if item.ssh_key_passphrase is defined else 'False' }} "

- name: sudo | add to sudoers file and validate
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^{{ item.username }} '
    line: "{{ item.username }} ALL=(ALL) {{ 'NOPASSWD:' if ( item.use_sudo_nopass|d(false) )  else '' }}ALL"
    validate: 'visudo -cf %s'
  environment:
    PATH: /usr/sbin:/usr/local/sbin:/sbin
  when: item.use_sudo|d(false)|bool == true and item.servers | intersect(group_names)
  loop: '{{ users }}'
  loop_control:
    label: "username: {{ item.username }}, use_sudo: {{ item.use_sudo|d(false) }}, use_sudo_nopass: {{ item.use_sudo_nopass|d(false) }}"

- name: sudo | remove from sudoers file and validate
  lineinfile:
    dest: /etc/sudoers
    state: absent
    regexp: '^{{ item.username }} '
    line: '{{ item.username }}'
    validate: 'visudo -cf %s'
  environment:
    PATH: /usr/sbin:/usr/local/sbin:/sbin
  when: item.use_sudo|d(false)|bool == false and item.servers | intersect(group_names) # noqa 601
  loop: '{{ users }}'
  loop_control:
    label: "username: {{ item.username }}, use_sudo: {{ item.use_sudo|d(false) }}"

- name: creating a file with wifi conekt
  copy:
    dest: "/etc/polkit-1/localauthority/50-local.d/org.freedesktop.NetworkManager.pkla"
    content: |
      [Enable NetworkManager]
      Identity=unix-group:netdev
      Action=org.freedesktop.NetworkManager.*
      ResultAny=no
      ResultInactive=no
      ResultActive=yes

- name: disable-user-list=true
  lineinfile: 
    dest: /etc/gdm3/greeter.dconf-defaults 
    regexp: '^\s*# disable-user-list' 
    line: 'disable-user-list=true'
    state: present

- name: "copy encrypting bash file {{username}}"
  template:
    src: encrypting.j2
    dest: '{{encrypting_file}}'
    mode: '0770'

- name: "copy expect file"
  template:
    src: expect.j2
    dest: '{{expect_file}}'
    mode: '0770'

- name: 'play ecryptfs migrate home {{username}}'
  shell: '{{expect_file}}'
  become: true

- name: 'remove {{expect_file}} and {{encrypting_file}} file'
  shell: |
    rm '{{expect_file}}'
    rm '{{encrypting_file}}'
  become: true

- name: config bash users
  include_tasks: config_users.yml
